from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model import Model
from swagger_server import util


class All(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, temperature=None, humidity=None, pm25=None, pm10=None, aqi=None):  # noqa: E501
        """All - a model defined in OpenAPI

        :param temperature: The temperature of this All.  # noqa: E501
        :type temperature: float
        :param humidity: The humidity of this All.  # noqa: E501
        :type humidity: int
        :param pm25: The pm25 of this All.  # noqa: E501
        :type pm25: int
        :param pm10: The pm10 of this All.  # noqa: E501
        :type pm10: int
        :param aqi: The aqi of this All.  # noqa: E501
        :type aqi: int
        """
        self.openapi_types = {
            'temperature': float,
            'humidity': int,
            'pm25': int,
            'pm10': int,
            'aqi': int
        }

        self.attribute_map = {
            'temperature': 'temperature',
            'humidity': 'humidity',
            'pm25': 'pm25',
            'pm10': 'pm10',
            'aqi': 'aqi'
        }

        self._temperature = temperature
        self._humidity = humidity
        self._pm25 = pm25
        self._pm10 = pm10
        self._aqi = aqi

    @classmethod
    def from_dict(cls, dikt) -> 'All':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The All of this All.  # noqa: E501
        :rtype: All
        """
        return util.deserialize_model(dikt, cls)

    @property
    def temperature(self) -> float:
        """Gets the temperature of this All.


        :return: The temperature of this All.
        :rtype: float
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature: float):
        """Sets the temperature of this All.


        :param temperature: The temperature of this All.
        :type temperature: float
        """

        self._temperature = temperature

    @property
    def humidity(self) -> int:
        """Gets the humidity of this All.


        :return: The humidity of this All.
        :rtype: int
        """
        return self._humidity

    @humidity.setter
    def humidity(self, humidity: int):
        """Sets the humidity of this All.


        :param humidity: The humidity of this All.
        :type humidity: int
        """

        self._humidity = humidity

    @property
    def pm25(self) -> int:
        """Gets the pm25 of this All.


        :return: The pm25 of this All.
        :rtype: int
        """
        return self._pm25

    @pm25.setter
    def pm25(self, pm25: int):
        """Sets the pm25 of this All.


        :param pm25: The pm25 of this All.
        :type pm25: int
        """

        self._pm25 = pm25

    @property
    def pm10(self) -> int:
        """Gets the pm10 of this All.


        :return: The pm10 of this All.
        :rtype: int
        """
        return self._pm10

    @pm10.setter
    def pm10(self, pm10: int):
        """Sets the pm10 of this All.


        :param pm10: The pm10 of this All.
        :type pm10: int
        """

        self._pm10 = pm10

    @property
    def aqi(self) -> int:
        """Gets the aqi of this All.


        :return: The aqi of this All.
        :rtype: int
        """
        return self._aqi

    @aqi.setter
    def aqi(self, aqi: int):
        """Sets the aqi of this All.


        :param aqi: The aqi of this All.
        :type aqi: int
        """

        self._aqi = aqi
